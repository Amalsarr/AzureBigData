{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "capstone-datalake-adf"
		},
		"ls_my_blob_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_my_blob'",
			"defaultValue": "DefaultEndpointsProtocol=https;AccountName=capstonedlstorage;"
		},
		"ls_wcd_blob_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_wcd_blob'",
			"defaultValue": "DefaultEndpointsProtocol=https;AccountName=wcddestorageexternal;"
		},
		"ls_ProjectKeyVault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://WCDProjectKeyVault.vault.azure.net/"
		},
		"ls_rds_pg_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "de-rds.czm23kqmbd6o.ca-central-1.rds.amazonaws.com"
		},
		"ls_rds_pg_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "stack"
		},
		"ls_rds_pg_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "postgres"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ls_ProjectKeyVault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This linked service provides secure access to secrets stored in the Azure Key Vault for the project.",
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('ls_ProjectKeyVault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_my_blob')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This linked service is used to link my own storage blob for both pipelines.",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_my_blob_connectionString')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ls_ProjectKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "my-blob-access-key"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_ProjectKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_rds_pg')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This linked service is used to connect to the RDS PostgreSQL database.",
				"annotations": [],
				"type": "PostgreSqlV2",
				"typeProperties": {
					"server": "[parameters('ls_rds_pg_properties_typeProperties_server')]",
					"port": 5432,
					"database": "[parameters('ls_rds_pg_properties_typeProperties_database')]",
					"username": "[parameters('ls_rds_pg_properties_typeProperties_username')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ls_ProjectKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "RDS-PostgreSql-Password"
					},
					"sslMode": 2,
					"authenticationType": "Basic"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_ProjectKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_wcd_blob')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This linked service connects to WeCloudData's public storage blob for use in pipeline 2.",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_wcd_blob_connectionString')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ls_ProjectKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "wcd-blob-access-key"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_ProjectKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_PostTypes_pg')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This dataset represents the PostTypes table stored in the RDS PostgreSQL DB.",
				"linkedServiceName": {
					"referenceName": "ls_rds_pg",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "PostgreSqlV2Table",
				"schema": [],
				"typeProperties": {
					"schema": "raw_st",
					"table": "posttypes"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_rds_pg')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_Posts_WCD_pq')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This dataset represents the Posts parquet files stored on WeCloudData's storage blob.",
				"linkedServiceName": {
					"referenceName": "ls_wcd_blob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "archive",
						"container": "de-project-st"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_wcd_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_Users_pg')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This dataset represents the Users table stored in the RDS PostgreSQL DB.",
				"linkedServiceName": {
					"referenceName": "ls_rds_pg",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "PostgreSqlV2Table",
				"schema": [],
				"typeProperties": {
					"schema": "raw_st",
					"table": "users"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_rds_pg')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_load_PostTypes_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This dataset loads posttypes from RDS as postgressql to posts file in my blob storage in a csv format",
				"linkedServiceName": {
					"referenceName": "ls_my_blob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "rds-postTypes.csv",
						"folderPath": "Capstone2/postTypes",
						"container": "mydatalakefilesystem"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_my_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_load_Posts_WCD_pq')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This data set loads post from we cloud data's blob storage to posts file in my blob storage in a Parquet format",
				"linkedServiceName": {
					"referenceName": "ls_my_blob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "*.parquet",
						"folderPath": "Capstone2/posts",
						"container": "mydatalakefilesystem"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_my_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_load_Users_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This data set loads users from RDS in postgressql format to users file in my blob storage in a csv format",
				"linkedServiceName": {
					"referenceName": "ls_my_blob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "rds-Users.csv",
						"folderPath": "Capstone2/users",
						"container": "mydatalakefilesystem"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_my_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copyOnceWeek')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Weekly data transfer of PostTypes and Users tables from the RDS PostgreSQL database to Azure Blob storage.",
				"activities": [
					{
						"name": "Retry Copy Users",
						"description": "\"Executes a set of activities in a loop to reattempt copying data for a specific duration.",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('UserFileCopied')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy Users",
									"description": "Copy Users from RDS PostgreSQL DB",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "PostgreSqlV2Source"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "id",
														"type": "Int32",
														"physicalType": "integer"
													},
													"sink": {
														"name": "id",
														"type": "String",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"name": "age",
														"type": "String",
														"physicalType": "character varying"
													},
													"sink": {
														"name": "age",
														"type": "String",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"name": "creationdate",
														"type": "DateTime",
														"physicalType": "date"
													},
													"sink": {
														"name": "creationdate",
														"type": "String",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"name": "displayname",
														"type": "String",
														"physicalType": "character varying"
													},
													"sink": {
														"name": "displayname",
														"type": "String",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"name": "downvotes",
														"type": "Int32",
														"physicalType": "integer"
													},
													"sink": {
														"name": "downvotes",
														"type": "String",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"name": "emailhash",
														"type": "String",
														"physicalType": "character varying"
													},
													"sink": {
														"name": "emailhash",
														"type": "String",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"name": "location",
														"type": "String",
														"physicalType": "character varying"
													},
													"sink": {
														"name": "location",
														"type": "String",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"name": "reputation",
														"type": "Int32",
														"physicalType": "integer"
													},
													"sink": {
														"name": "reputation",
														"type": "String",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"name": "upvotes",
														"type": "Int32",
														"physicalType": "integer"
													},
													"sink": {
														"name": "upvotes",
														"type": "String",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"name": "views",
														"type": "Int32",
														"physicalType": "integer"
													},
													"sink": {
														"name": "views",
														"type": "String",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"name": "websiteurl",
														"type": "String",
														"physicalType": "character varying"
													},
													"sink": {
														"name": "websiteurl",
														"type": "String",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"name": "accountid",
														"type": "Int32",
														"physicalType": "integer"
													},
													"sink": {
														"name": "accountid",
														"type": "String",
														"physicalType": "String"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_Users_pg",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_load_Users_csv",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Users Conditional Action",
									"description": "Make an action depending on post files existence",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Copy Users",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(activity('Copy Users').output.filesWritten, 0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Set UserFileCopied",
												"description": "\"Set the UserFileCopied pipeline variable to true indicating successful copy attempt",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "UserFileCopied",
													"value": true
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Users Retry WaitTime",
												"description": "Set the time till the next copy retry attempt",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 1800
												}
											}
										]
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "Check User FilesCopied",
						"description": "Handle User copy failure case",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Retry Copy Users",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('UserFileCopied')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Copy Users Files Failure",
									"description": "A fail activity associated with the status of copying files from source",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": "User files were not copied from the source",
										"errorCode": "CopyError"
									}
								}
							]
						}
					},
					{
						"name": "Retry Copy PostTypes",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('PostTypeFileCopied')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "PostTypes Conditional Action",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Copy PostType",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(activity('Copy PostType').output.filesWritten, 0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Set PostTypeFileCopied",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "PostTypeFileCopied",
													"value": true
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "PostType Retry WaitTime",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 1800
												}
											}
										]
									}
								},
								{
									"name": "Copy PostType",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "PostgreSqlV2Source"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_PostTypes_pg",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_load_PostTypes_csv",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "Check PostType FilesCopied",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Retry Copy PostTypes",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('PostTypeFileCopied')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Copy PostTypes Files Failure",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": "PostType files were not copied from the source.",
										"errorCode": "CopyFailure"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"UserFileCopied": {
						"type": "Boolean",
						"defaultValue": false
					},
					"PostTypeFileCopied": {
						"type": "Boolean",
						"defaultValue": false
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_Users_pg')]",
				"[concat(variables('factoryId'), '/datasets/ds_load_Users_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_PostTypes_pg')]",
				"[concat(variables('factoryId'), '/datasets/ds_load_PostTypes_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Retry Copy Users",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('UserFileCopied')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Users Conditional Action1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Copy Users",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(activity('Copy Users').output.filesWritten, 0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Set UserFileCopied",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "UserFileCopied",
													"value": true
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Users Retry WaitTime",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 1800
												}
											}
										]
									}
								},
								{
									"name": "Copy Users",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "PostgreSqlV2Source"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_Users_pg",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_load_Users_csv",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "Retry Copy postTypes",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('PostTypeFileCopied ')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "PostTypes Conditional Action",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Copy postTypes",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(activity('Copy postTypes').output.filesWritten, 0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Set PostTypeFileCopied",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "PostTypeFileCopied ",
													"value": true
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "PostTypes Retry WaitTime",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 1800
												}
											}
										]
									}
								},
								{
									"name": "Copy postTypes",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "PostgreSqlV2Source"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_PostTypes_pg",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_load_PostTypes_csv",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "Check User FilesCopied",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Retry Copy Users",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('UserFileCopied')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Copy Users Files Failure",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": "User files were not copied from the source.",
										"errorCode": "CopyError"
									}
								}
							]
						}
					},
					{
						"name": "Check PostTypeFilesCopied",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Retry Copy postTypes",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('PostTypeFileCopied ')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Copy PostTypes Files Failure",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": "PostType files were not copied from the source.",
										"errorCode": "CopyFailure"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"PostTypeFileCopied ": {
						"type": "Boolean",
						"defaultValue": false
					},
					"UserFileCopied": {
						"type": "Boolean",
						"defaultValue": false
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_Users_pg')]",
				"[concat(variables('factoryId'), '/datasets/ds_load_Users_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_PostTypes_pg')]",
				"[concat(variables('factoryId'), '/datasets/ds_load_PostTypes_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger1')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pipeline1",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2024-05-24T23:43:00",
						"timeZone": "Arab Standard Time",
						"schedule": {
							"minutes": [
								46
							],
							"hours": [
								2
							],
							"weekDays": [
								"Saturday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pipeline1')]"
			]
		}
	]
}