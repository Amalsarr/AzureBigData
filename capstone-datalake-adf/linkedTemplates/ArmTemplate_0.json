{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "capstone-datalake-adf"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'"
		},
		"ls_my_blob_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_my_blob'",
			"defaultValue": "DefaultEndpointsProtocol=https;AccountName=capstonedlstorage;"
		},
		"ls_wcd_blob_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_wcd_blob'",
			"defaultValue": "DefaultEndpointsProtocol=https;AccountName=wcddestorageexternal;"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://capstonedlstorage.dfs.core.windows.net/"
		},
		"ls_ProjectKeyVault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://WCDProjectKeyVault.vault.azure.net/"
		},
		"ls_rds_pg_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "de-rds.czm23kqmbd6o.ca-central-1.rds.amazonaws.com"
		},
		"ls_rds_pg_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "stack"
		},
		"ls_rds_pg_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "postgres"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_ProjectKeyVault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This linked service provides secure access to secrets stored in the Azure Key Vault for the project.",
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('ls_ProjectKeyVault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_load_generic_pq')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This data set loads post from we cloud data's blob storage to posts file in my blob storage in a Parquet format",
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"path": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().path",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_load_generic_binary')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filePath": {
						"type": "string"
					},
					"container": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().filePath",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDatabricks1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-905996515831982.2.azuredatabricks.net",
					"accessToken": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ls_ProjectKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "AzureDatabricks"
					},
					"newClusterNodeType": "Standard_DS3_v2",
					"newClusterNumOfWorker": "1",
					"newClusterSparkEnvVars": {
						"PYSPARK_PYTHON": "/databricks/python3/bin/python3"
					},
					"newClusterVersion": "13.3.x-scala2.12",
					"clusterOption": "Fixed",
					"newClusterInitScripts": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_ProjectKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDatabricksDeltaLake1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "A linked service to connect Azure data factory to Azure databricks",
				"annotations": [],
				"type": "AzureDatabricksDeltaLake",
				"typeProperties": {
					"domain": "https://adb-905996515831982.2.azuredatabricks.net",
					"clusterId": "0525-112459-tykt6jm7",
					"accessToken": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ls_ProjectKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "AzureDatabricks"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_ProjectKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_my_blob')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This linked service is used to link my own storage blob for both pipelines.",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_my_blob_connectionString')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ls_ProjectKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "my-blob-access-key"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_ProjectKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_rds_pg')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This linked service is used to connect to the RDS PostgreSQL database.",
				"annotations": [],
				"type": "PostgreSqlV2",
				"typeProperties": {
					"server": "[parameters('ls_rds_pg_properties_typeProperties_server')]",
					"port": 5432,
					"database": "[parameters('ls_rds_pg_properties_typeProperties_database')]",
					"username": "[parameters('ls_rds_pg_properties_typeProperties_username')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ls_ProjectKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "RDS-PostgreSql-Password"
					},
					"sslMode": 2,
					"authenticationType": "Basic"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_ProjectKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_wcd_blob')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This linked service connects to WeCloudData's public storage blob for use in pipeline 2.",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_wcd_blob_connectionString')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ls_ProjectKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "wcd-blob-access-key"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_ProjectKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_PostTypes_pg')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This dataset represents the PostTypes table stored in the RDS PostgreSQL DB.",
				"linkedServiceName": {
					"referenceName": "ls_rds_pg",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "PostgreSqlV2Table",
				"schema": [],
				"typeProperties": {
					"schema": "raw_st",
					"table": "posttypes"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_rds_pg')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_Posts_WCD_pq')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This dataset represents the Posts parquet files stored on WeCloudData's storage blob.",
				"linkedServiceName": {
					"referenceName": "ls_wcd_blob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "Posts_today",
						"container": "de-project-st"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_wcd_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_Posts_WCD_pq1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This dataset represents the Posts parquet files stored on WeCloudData's storage blob.",
				"linkedServiceName": {
					"referenceName": "ls_wcd_blob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "Posts_today",
						"container": "de-project-st"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_wcd_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_Users_pg')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This dataset represents the Users table stored in the RDS PostgreSQL DB.",
				"linkedServiceName": {
					"referenceName": "ls_rds_pg",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "PostgreSqlV2Table",
				"schema": [],
				"typeProperties": {
					"schema": "raw_st",
					"table": "users"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_rds_pg')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_load_PostTypes_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This dataset loads posttypes from RDS as postgressql to posts file in my blob storage in a csv format",
				"linkedServiceName": {
					"referenceName": "ls_my_blob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "rds-postTypes.csv",
						"folderPath": "Capstone2/postTypes",
						"container": "mydatalakefilesystem"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_my_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_load_Posts_WCD_pq')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This data set loads post from we cloud data's blob storage to posts file in my blob storage in a Parquet format",
				"linkedServiceName": {
					"referenceName": "ls_my_blob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "Capstone2/posts",
						"container": "mydatalakefilesystem"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_my_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_load_Users_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This data set loads users from RDS in postgressql format to users file in my blob storage in a csv format",
				"linkedServiceName": {
					"referenceName": "ls_my_blob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "rds-Users.csv",
						"folderPath": "Capstone2/users",
						"container": "mydatalakefilesystem"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_my_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RunDaily')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy Posts parquet files daily from an WCD's Azure blob storage container",
				"activities": [
					{
						"name": "Get Metadata1",
						"description": "Get information about the dataset to check if there is any content",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_load_Posts_WCD_pq",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "Check If Files Exist",
						"description": "An if condition activity that helps in deleting files only if the exist",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@bool(activity('Get Metadata1').output.exists)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete Posts",
									"description": "Delete posts from Posts directory",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_load_Posts_WCD_pq",
											"type": "DatasetReference",
											"parameters": {}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "ls_my_blob",
												"type": "LinkedServiceReference"
											},
											"path": "mydatalakefilesystem/Capstone2/DailyDeletedLog"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "Retry Loop",
						"description": "Executes a set of activities in a loop for a specific duration.",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Check If Files Exist",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('FilesCopied')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy Posts",
									"description": "Copy posts from WCD's Azure blob storage",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "00.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFileName": "*.parquet",
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "ParquetReadSettings"
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_Posts_WCD_pq",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_load_Posts_WCD_pq",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Copy Posts Conditional Action",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Copy Posts",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(activity('Copy Posts').output.filesWritten, 0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Set FilesCopied",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "FilesCopied",
													"value": {
														"value": "@bool(true)",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Retry WaitTime",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 1800
												}
											}
										]
									}
								},
								{
									"name": "MailAlert",
									"description": "Sends an Email to alert in case of failure in the copy data activity in this pipeline.",
									"type": "WebActivity",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "POST",
										"headers": {},
										"url": "https://pipelinefailure-emailalert.azurewebsites.net:443/api/MyAlertWorkflow/triggers/When_a_HTTP_request_is_received/invoke?api-version=2022-05-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=UvzorP9hvO5d47ZXhEb__EvhRiMVBfvz6JMF9sN60yo",
										"body": {
											"value": "{\n    \"Pipeline\": \"@{pipeline().Pipeline}\",\n    \"ErrorMessage\": \"@{activity('Copy Posts').Error.Message}\",\n    \"DataFactoryName\": \"@{pipeline().DataFactory}\",\n    \"Runid\": \"@{pipeline().RunId}\"\n}\n",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "01:00:00"
						}
					},
					{
						"name": "Check FilesCopied",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Retry Loop",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('FilesCopied')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Copy Files Failure",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": "Posts files were not copied from the source.",
										"errorCode": "CopyError"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ML Post Classification",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/Workspace/Users/amalalsarrar@gmail.com/5_Model_Prediction"
									},
									"linkedServiceName": {
										"referenceName": "AzureDatabricks1",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"FilesCopied": {
						"type": "Boolean",
						"defaultValue": false
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_load_Posts_WCD_pq')]",
				"[concat(variables('factoryId'), '/datasets/ds_Posts_WCD_pq')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDatabricks1')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_my_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RunOnceWeekly')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy PostTypes and Users tables from RDS PostgreSQL DB on weekly basis.",
				"activities": [
					{
						"name": "Retry Copy Users",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('UserFileCopied')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Users Conditional Action1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Copy Users",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(activity('Copy Users').output.filesWritten, 0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Set UserFileCopied",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "UserFileCopied",
													"value": true
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Users Retry WaitTime",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 1800
												}
											}
										]
									}
								},
								{
									"name": "Copy Users",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "PostgreSqlV2Source"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_Users_pg",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_load_Users_csv",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "Retry Copy postTypes",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('PostTypeFileCopied ')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "PostTypes Conditional Action",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Copy postTypes",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(activity('Copy postTypes').output.filesWritten, 0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Set PostTypeFileCopied",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "PostTypeFileCopied ",
													"value": true
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "PostTypes Retry WaitTime",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 1800
												}
											}
										]
									}
								},
								{
									"name": "Copy postTypes",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "PostgreSqlV2Source"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_PostTypes_pg",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_load_PostTypes_csv",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "Check User FilesCopied",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Retry Copy Users",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('UserFileCopied')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Copy Users Files Failure",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": "User files were not copied from the source.",
										"errorCode": "CopyError"
									}
								}
							]
						}
					},
					{
						"name": "Check PostTypeFilesCopied",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Retry Copy postTypes",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('PostTypeFileCopied ')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Copy PostTypes Files Failure",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": "PostType files were not copied from the source.",
										"errorCode": "CopyFailure"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"PostTypeFileCopied ": {
						"type": "Boolean",
						"defaultValue": false
					},
					"UserFileCopied": {
						"type": "Boolean",
						"defaultValue": false
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_Users_pg')]",
				"[concat(variables('factoryId'), '/datasets/ds_load_Users_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_PostTypes_pg')]",
				"[concat(variables('factoryId'), '/datasets/ds_load_PostTypes_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load Posts Data')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_Posts_WCD_pq1",
								"type": "DatasetReference"
							},
							"name": "ReadSourceData"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage1",
								"type": "LinkedServiceReference"
							},
							"name": "SavePostsData",
							"rejectedDataLinkedService": {
								"referenceName": "ls_my_blob",
								"type": "LinkedServiceReference"
							}
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage1",
								"type": "LinkedServiceReference"
							},
							"name": "SaveIncrementalDate"
						}
					],
					"transformations": [
						{
							"name": "FitlerOnlyIncrementalData"
						},
						{
							"name": "GetIncrementalDate"
						}
					],
					"scriptLines": [
						"parameters{",
						"     incrementalDate as string ('2024-05-14T00:00:00')",
						"}",
						"source(output(",
						"          id as integer,",
						"          AcceptedAnswerId as integer,",
						"          AnswerCount as integer,",
						"          Body as string,",
						"          CommentCount as integer,",
						"          CreationDate as date,",
						"          FavoriteCount as integer,",
						"          LastEditDate as date,",
						"          LastEditorDisplayName as string,",
						"          LastEditorUserId as integer,",
						"          OwnerUserId as integer,",
						"          ParentId as integer,",
						"          PostTypeId as integer,",
						"          Score as float,",
						"          Tags as string,",
						"          Title as string,",
						"          ViewCount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     wildcardPaths:['*']) ~> ReadSourceData",
						"ReadSourceData filter(LastEditDate > toDate($incrementalDate, 'yyyy-MM-dd')) ~> FitlerOnlyIncrementalData",
						"FitlerOnlyIncrementalData aggregate(MaxLastEditDate = coalesce(toString(max(LastEditDate)), $incrementalDate)) ~> GetIncrementalDate",
						"FitlerOnlyIncrementalData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'mydatalakefilesystem',",
						"     folderPath: 'Capstone2/incremetal_pl/posts_incremental/inbound',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SavePostsData",
						"GetIncrementalDate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'mydatalakefilesystem',",
						"     folderPath: 'Capstone2/incremetal_pl/incrementalDate',",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SaveIncrementalDate"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_Posts_WCD_pq1')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_my_blob')]"
			]
		}
	]
}